import pytest
from app.models.user import User

def test_create_user_instance():
    """Test creating a User instance with all fields."""
    user_data = {
        "email": "test@example.com",
        "hashed_password": "hashedpassword123",
        "full_name": "Test User",
        "is_active": True,
        "is_superuser": False,
    }
    user = User(**user_data)

    assert user.email == user_data["email"]
    assert user.hashed_password == user_data["hashed_password"]
    assert user.full_name == user_data["full_name"]
    assert user.is_active == user_data["is_active"]
    assert user.is_superuser == user_data["is_superuser"]
    assert user.id is None  # Assuming id is generated by the DB or BaseModel

def test_create_user_instance_minimal():
    """Test creating a User instance with only required fields and check defaults."""
    user_data = {
        "email": "minimal@example.com",
        "hashed_password": "anotherhashedpassword",
    }
    user = User(**user_data)

    assert user.email == user_data["email"]
    assert user.hashed_password == user_data["hashed_password"]
    assert user.full_name is None  # Default for Optional[str]
    assert user.is_active is True  # Default value from model
    assert user.is_superuser is False  # Default value from model

def test_user_email_uniqueness_placeholder():
    """
    Placeholder for testing email uniqueness.
    This typically requires a database session and integration testing.
    """
    # For a true unit test of uniqueness, you might mock the database interaction
    # or rely on integration tests. For now, this serves as a reminder.
    pass

# Add more tests here as needed, e.g., for field validations if you add them
# (like email format, password complexity) or any model methods. 