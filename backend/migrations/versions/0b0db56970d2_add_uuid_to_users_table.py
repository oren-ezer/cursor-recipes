"""add uuid to users table

Revision ID: 0b0db56970d2
Revises: 658fc5970371
Create Date: 2025-05-10 21:55:47.815118

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import uuid
from sqlalchemy import text


# revision identifiers, used by Alembic.
revision: str = '0b0db56970d2'
down_revision: Union[str, None] = '658fc5970371'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Add uuid column without constraints
    op.add_column('users', sa.Column('uuid', sa.String(), nullable=True))
    
    # Generate unique UUIDs for existing rows
    connection = op.get_bind()
    users = connection.execute(text('SELECT id FROM users')).fetchall()
    for user in users:
        connection.execute(
            text('UPDATE users SET uuid = :uuid WHERE id = :id'),
            {"uuid": str(uuid.uuid4()), "id": user[0]}
        )
    
    # Make uuid column not nullable and add unique constraint
    op.alter_column('users', 'uuid', nullable=False)
    op.create_index(op.f('ix_users_uuid'), 'users', ['uuid'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_uuid'), table_name='users')
    op.drop_column('users', 'uuid')
    # ### end Alembic commands ###
